/* http_parameters   */
:- use_module(library(http/http_parameters)).
/* http_reply        */
:- use_module(library(http/http_header)).
/* reply_json_dict   */
:- use_module(library(http/http_json)).


:- use_module(bd(aviao.pl), []).

/*
   GET api/v1/avioes/
   Retorna uma lista com todos os avioes.
*/
avioes(get, '', _Pedido):- !,
    envia_tabela.

/*
   GET api/v1/avioes/Id
   Retorna o `aviao` com Id 1 ou erro 404 caso o `aviao` não
   seja encontrado.
*/
avioes(get, AtomId, _Pedido):-
    atom_number(AtomId, Id),
    !,
    envia_tupla(Id).

/*
   POST api/v1/avioes
   Adiciona um novo aviao. Os dados deverão ser passados no corpo da
   requisição no formato JSON.

   Um erro 400 (BAD REQUEST) deve ser retornado caso a Tipo não tenha sido
   informada.
*/
avioes(post, _, Pedido):-
    http_read_json_dict(Pedido, Dados),
    !,
    insere_tupla(Dados).

/*
  PUT api/v1/avioes/Id
  Atualiza o aviao com o Id informado.
  Os dados são passados no corpo do pedido no formato JSON.
*/
avioes(put, AtomId, Pedido):-
    atom_number(AtomId, Id),
    http_read_json_dict(Pedido, Dados),
    !,
    atualiza_tupla(Dados, Id).

/*
   DELETE api/v1/avioes/Id
   Apaga o aviao com o Id informado
*/
avioes(delete, AtomId, _Pedido):-
    atom_number(AtomId, Id),
    !,
    aviao:remove(Id),
    throw(http_reply(no_content)).

/* Se algo ocorrer de errado, a resposta de método não
   permitido será retornada.
 */

avioes(Metodo, Id, _Pedido) :-
    throw(http_reply(method_not_allowed(Metodo, Id))).


insere_tupla( _{ avi_nome:Nome, avi_tipo:Tipo}):-
    % Validar Tipo antes de inserir
    aviao:insere(Id, Nome, Tipo)
    -> envia_tupla(Id)
    ;  throw(http_reply(bad_request('Tipo ausente'))).

atualiza_tupla( _{ avi_nome:Nome, avi_tipo:Tipo}, Id):-
       aviao:atualiza(Id, Nome, Tipo)
    -> envia_tupla(Id)
    ;  throw(http_reply(not_found(Id))).


envia_tupla(Id):-
       aviao:aviao(Id, Nome, Tipo)
    -> reply_json_dict( _{avi_id:Id, avi_nome:Nome, avi_tipo:Tipo} )
    ;  throw(http_reply(not_found(Id))).


envia_tabela :-
    findall( _{avi_id:Id, avi_nome:Nome, avi_tipo:Tipo},
             aviao:aviao(Id,Nome,Tipo),
             Tuplas ),
    reply_json_dict(Tuplas).
